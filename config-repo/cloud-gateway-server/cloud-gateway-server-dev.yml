spring:
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true #是否与服务注册于发现组件进行结合，通过 serviceId 转发到具体的服务实例。
          #默认为 false，设为 true 便开启通过服务中心的自动根据 serviceId 创建路由的功能。
      routes:
        - id: add_request_parameter_route
          uri: http://example.org
          filters:
            - AddRequestParameter=foo, bar
  zipkin:
    base-url: http://localhost:9500
    sender:
      type: web
    sleuth:
      sampler:
        probability: 1
logging:
  level:
    org.springframework.cloud.gateway: debug
# 最后暴露自己的actuator的所有端口信息
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: ALWAYS
  #spring:
  #          cloud:
  #            gateway:
  #              routes:
  #              - id: add_request_parameter_route
  #                uri: http://example.org
  #                filters:
  #                - AddRequestParameter=foo, bar
# 定义转发规则
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: neo_route  # 我们自定义的路由 ID，保持唯一
#          uri: http://www.ityouknow.com  # 目标服务地址
#          predicates:  # 路由条件，Predicate 接受一个输入参数，返回一个布尔值结果。
#            - Path=/spring-cloud
# Spring Cloud GateWay 内置几种 Predicate 的使用
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>通过时间匹配<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#
####################################
# Predicate 支持设置一个时间，在请求进行转发的时候，
# 可以通过判断在这个时间之前或者之后进行转发。
# 比如我们现在设置只有在2019年1月1日才会转发到我的网站，
# 在这之前不进行转发，我就可以这样配置
####################################
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: time_route
#          uri: http://ityouknow.com
#          predicates:
#            - After=2018-05-20T06:06:06+08:00[Asia/Shanghai]
####################################
# 添加完路由规则之后，访问地址http://localhost:9999
# 会自动转发到http://ityouknow.com。
# Before Route Predicate 刚好相反，
# 在某个时间之前的请求的请求都进行转发。
# 我们把上面路由规则中的 After 改为 Before，如下：
####################################
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: after_route
#          uri: http://ityouknow.com
#          predicates:
#            - Before=2019-05-20T06:06:06+08:00[Asia/Shanghai]
####################################
# 除过在时间之前或者之后外，Gateway
# 还支持限制路由请求在某一个时间段范围内，
# 可以使用 Between Route Predicate 来实现。
####################################
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: after_route
#          uri: http://ityouknow.com
#          predicates:
#            - Between=2019-05-20T06:06:06+08:00[Asia/Shanghai], 2019-05-20T06:06:06+08:00[Asia/Shanghai]
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>通过 Cookie 匹配<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#
####################################
# Cookie Route Predicate 可以接收两个参数，
# 一个是 Cookie name ,一个是正则表达式，
# 路由规则会通过获取对应的 Cookie name 值和正则表达式去匹配，
# 如果匹配上就会执行路由，
# 如果没有匹配上则不执行。
####################################
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: cookie_route
#          uri: http://ityouknow.com
#          predicates:
#            - Cookie=ityouknow, kee.e
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>通过 Header 属性匹配<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#
####################################
# Header Route Predicate 和 Cookie Route Predicate 一样，
# 也是接收 2 个参数，
# 一个 header 中属性名称和一个正则表达式，
# 这个属性值和正则表达式匹配则执行。
####################################
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: header_route
#          uri: http://ityouknow.com
#          predicates:
#            - Header=X-Request-Id, \d+
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>通过 Host 匹配<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#
####################################
# Host Route Predicate 接收一组参数，一组匹配的域名列表，
# 这个模板是一个 ant 分隔的模板，
# 用.号作为分隔符。它通过参数中的主机地址作为匹配规则。
####################################
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: host_route
#          uri: http://ityouknow.com
#          predicates:
#            - Host=**.ityouknow.com
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>通过请求方式匹配<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#
####################################
# 可以通过是 POST、GET、PUT、DELETE
# 等不同的请求方式来进行路由。
####################################
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: method_route
#          uri: http://ityouknow.com
#          predicates:
#            - Method=GET
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>通过请求路径匹配<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#
####################################
# Path Route Predicate
# 接收一个匹配路径的参数来判断是否走路由。
####################################
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: host_route
#          uri: http://ityouknow.com
#          predicates:
#            - Path=/foo/{segment}
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>通过请求参数匹配<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#
####################################
# Query Route Predicate 支持传入两个参数，
# 一个是属性名一个为属性值，属性值可以是正则表达式。
####################################
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: query_route
#          uri: http://ityouknow.com
#          predicates:
#            - Query=smile
####################################
# 还可以将 Query 的值以键值对的方式进行配置，
# 这样在请求过来时会对属性值和正则进行匹配，匹配上才会走路由。
####################################
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: query_route
#          uri: http://ityouknow.com
#          predicates:
#            - Query=keep, pu.
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>通过请求 ip 地址进行匹配<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#
####################################
# Predicate 也支持通过设置某个 ip 区间号段的请求才会路由，
# RemoteAddr Route Predicate
# 接受 cidr 符号(IPv4 或 IPv6 )字符串的列表(最小大小为1)，
# 例如 192.168.0.1/16
# (其中 192.168.0.1 是 IP 地址，16 是子网掩码)。
####################################
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: remoteaddr_route
#          uri: http://ityouknow.com
#          predicates:
#            - RemoteAddr=192.168.1.1/24
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>组合使用<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#
####################################
# 上面为了演示各个 Predicate 的使用，
# 我们是单个单个进行配置测试，其实可以将各种
# Predicate 组合起来一起使用。
####################################
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: host_foo_path_headers_to_httpbin
#        uri: http://ityouknow.com
#        predicates:
#          - Host=**.foo.org
#          - Path=/headers
#          - Method=GET
#          - Header=X-Request-Id, \d+
#          - Query=foo, ba.
#          - Query=baz
#          - Cookie=chocolate, ch.p
#          - After=2018-01-20T06:06:06+08:00[Asia/Shanghai]